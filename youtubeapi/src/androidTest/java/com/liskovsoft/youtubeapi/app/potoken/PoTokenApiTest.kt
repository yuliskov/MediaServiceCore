package com.liskovsoft.youtubeapi.app.potoken

import com.liskovsoft.sharedutils.TestHelpers
import com.liskovsoft.googlecommon.common.helpers.RetrofitHelper
import com.liskovsoft.googlecommon.common.js.V8Runtime
import org.junit.Assert.assertNotNull
import org.junit.Before
import org.junit.Ignore
import org.junit.Test

class PoTokenApiTest {
    private val requestKey = "O43z0dpjhgX20SCx4KAo"
    private lateinit var visitorData: String
    private val program = ""

    @Before
    fun setUp() {
        visitorData = "CgtXYm83Ni15aTkyWSjxrbu4BjIKCgJVQRIEGgAgHA%3D%3D"
    }

    @Test
    fun testOpenPrivateJSFile() {
        evaluate(TestHelpers.readResource("potoken/privateScript.js"), program)
    }

    @Test
    fun testGetChallenge() {
        val result = getChallenge()

        assertNotNull("Private script not null", result?.interpreterJavascript?.privateDoNotAccessOrElseSafeScriptWrappedValue)

        evaluate(result?.interpreterJavascript?.privateDoNotAccessOrElseSafeScriptWrappedValue, result?.program)
    }

    @Ignore("Not fixed yet")
    @Test
    fun testGetPoToken() {
        val result = getChallenge()

        val poToken = PoToken()

        val poTokenResult = poToken.generate(
            PoToken.Arguments(
                result?.interpreterJavascript?.privateDoNotAccessOrElseSafeScriptWrappedValue,
                result?.program,
                result?.globalName,
                getConfig()
            )
        )

        assertNotNull("PoToken not null", poTokenResult?.poToken)
    }

    private fun getChallenge(): Challenge.Result? {
        val challenge = Challenge()

        val result = challenge.create(getConfig())
        return result
    }

    private fun getConfig() = BotGuardConfig(RetrofitHelper.create(PoTokenApi::class.java), requestKey = requestKey, identifier = visitorData)

    private fun evaluate(scriptContent: String?, program: String?) {
        val script = listOf(
            "window = {}; window.document = {};",
            scriptContent,
            "var vm = trayride; vm.a('${program}', () => {}, true, undefined, () => {}).toString();"
        )

        val result = V8Runtime.instance().evaluate(script.joinToString(""))

        assertNotNull(result)
    }
}